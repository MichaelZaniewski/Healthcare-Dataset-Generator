#!/usr/bin/env python3
# Standalone Healthcare Dataset Generator 

import argparse, os, sys, re, json, glob, subprocess, tempfile, base64
from pathlib import Path
import pandas as pd
import numpy as np

BASE_B64 = ""

def pick_file_by_suffix(folder, suffix):
    cand = sorted(glob.glob(os.path.join(folder, f"*_{suffix}.csv")), key=os.path.getmtime, reverse=True)
    if not cand:
        raise FileNotFoundError(f"No *_{suffix}.csv found in {folder}")
    return cand[0]

def derive(df, *names):
    for n in names:
        if n in df.columns: return n
    return None

# ---------------- Fixes kept ----------------
def fix_ages(visits, patients):
    pid_v = derive(visits, "patient_id","Patient_ID","id")
    pid_p = derive(patients, "id","patient_id","Patient_ID")
    dob_p = derive(patients, "date_of_birth","dob","Date_of_Birth")
    admit = derive(visits, "date_of_admission","admit_date","admission_date")
    age_v = derive(visits, "age","Age")
    if not all([pid_v, pid_p, dob_p, admit, age_v]):
        return visits
    v = visits.merge(patients[[pid_p, dob_p]].rename(columns={pid_p:"__pid__", dob_p:"__dob__"}),
                     left_on=pid_v, right_on="__pid__", how="left")
    v["__ad"] = pd.to_datetime(v[admit], errors="coerce")
    v["__dob__"] = pd.to_datetime(v["__dob__"], errors="coerce")
    mask = v["__ad"].notna() & v["__dob__"].notna()
    v.loc[mask, age_v] = v.loc[mask].apply(
        lambda r: max(0, r["__ad"].year - r["__dob__"].year - ((r["__ad"].month, r["__ad"].day) < (r["__dob__"].month, r["__dob__"].day))), axis=1
    )
    v[age_v] = pd.to_numeric(v[age_v], errors="coerce").fillna(0).astype(int).clip(lower=0)
    v.drop(columns=[c for c in ["__pid__","__dob__","__dob","__ad"] if c in v.columns], inplace=True)
    return v

def rescale_charges_for_escalation(visits, billing):
    admit = derive(visits, "date_of_admission","admit_date","admission_date")
    disch = derive(visits, "date_of_discharge","discharge_date","disch_date")
    kv = derive(visits, "visit_id","medical_record_id","id")
    kb = derive(billing, "visit_id","medical_record_id","id")
    ch = derive(billing, "total_charge","Total_Charge")
    if not all([admit, disch, kv, kb, ch]):
        return billing
    tmp = visits[[kv, admit, disch]].copy()
    tmp["__ad"] = pd.to_datetime(tmp[admit], errors="coerce")
    tmp["__dc"] = pd.to_datetime(tmp[disch], errors="coerce")
    tmp["LOS"] = (tmp["__dc"] - tmp["__ad"]).dt.days.fillna(1).astype(int).clip(lower=1)
    b = billing.merge(tmp[[kv,"LOS"]], left_on=kb, right_on=kv, how="left")
    b[ch] = pd.to_numeric(b[ch], errors="coerce").fillna(87)
    los = b["LOS"].fillna(1).astype(int).clip(lower=1).values
    orig = b[ch].values
    daily = np.maximum(40, np.round(orig / np.maximum(1, los) * 0.85))
    base = np.maximum(20, np.round(orig * 0.10))
    esc = np.zeros_like(orig, dtype=float)
    mask = los > 1
    esc[mask] = (orig[mask] - base[mask] - daily[mask]*los[mask]) * 2.0 / (los[mask]*(los[mask]-1))
    esc = np.maximum(10, np.round(esc))
    new_charge = base + daily*los + esc * (los*(los-1)/2.0)
    new_charge = np.maximum(87, np.round(new_charge)).astype(int)
    b[ch] = new_charge
    resp = derive(billing, "patient_responsibility_amount","patient_responsibility")
    cov  = derive(billing, "insurance_coverage_amount","insurance_coverage")
    if resp and cov:
        covv = pd.to_numeric(b[cov], errors="coerce").fillna(0)
        b[resp] = (b[ch] - covv).clip(lower=0).astype(int)
    billing = billing.drop(columns=[ch], errors="ignore")
    out = b[billing.columns.tolist()].copy()
    out[ch] = b[ch].values
    if resp:
        out[resp] = b[resp].values
    return out

def recompute_patient_age(patients: pd.DataFrame, today_str: str) -> pd.DataFrame:
    age_col = next((c for c in ["age","Age"] if c in patients.columns), None)
    dob_col = next((c for c in ["date_of_birth","dob","Date_of_Birth"] if c in patients.columns), None)
    if not age_col or not dob_col: return patients
    today = pd.to_datetime(today_str, errors="coerce")
    dob = pd.to_datetime(patients[dob_col], errors="coerce")
    had_bday = ((today.month > dob.dt.month) | ((today.month == dob.dt.month) & (today.day >= dob.dt.day)))
    age_calc = (today.year - dob.dt.year - (~had_bday).astype(int)).clip(lower=0)
    mask = dob.notna()
    patients.loc[mask, age_col] = age_calc[mask].astype("Int64").astype(int)
    return patients

# ---------------- ZIP pool & geo helpers ----------------
_PREFIX_STATE = {
    "100":"NY","101":"NY","102":"NY","104":"NY","112":"NY","113":"NY",
    "070":"NJ","073":"NJ","076":"NJ",
    "900":"CA","902":"CA","904":"CA","906":"CA","907":"CA","908":"CA","910":"CA","913":"CA","914":"CA",
    "606":"IL","607":"IL","608":"IL",
    "770":"TX","773":"TX","774":"TX","752":"TX","750":"TX","761":"TX","762":"TX",
    "782":"TX","781":"TX","780":"TX","787":"TX","786":"TX","785":"TX",
    "331":"FL","330":"FL","333":"FL",
    "941":"CA","940":"CA","945":"CA","947":"CA","948":"CA","950":"CA","958":"CA","956":"CA","957":"CA",
    "200":"DC","202":"DC","203":"DC","204":"DC","205":"DC","222":"VA","223":"VA",
    "021":"MA","022":"MA","024":"MA",
    "850":"AZ","852":"AZ","853":"AZ",
    "191":"PA","190":"PA",
    "981":"WA","980":"WA","982":"WA",
    "802":"CO","800":"CO","801":"CO",
    "303":"GA","300":"GA","301":"GA",
    "972":"OR","970":"OR","971":"OR",
    "482":"MI","480":"MI","481":"MI",
    "462":"IN","460":"IN","461":"IN",
    "372":"TN","370":"TN","371":"TN",
    "731":"OK","730":"OK",
    "554":"MN","553":"MN","551":"MN","550":"MN",
    "441":"OH","440":"OH","442":"OH",
    "277":"NC","275":"NC","276":"NC","274":"NC","272":"NC","271":"NC","270":"NC",
    "631":"MO","630":"MO","633":"MO",
    "641":"MO","640":"MO","662":"KS","660":"KS",
    "706":"LA","708":"LA","707":"LA","705":"LA","703":"LA",
    "995":"AK","996":"AK","997":"AK",
}
_PREFIX_CITY = {
    "100":"New York","101":"New York","102":"New York","104":"Bronx","112":"Brooklyn","113":"Queens",
    "070":"Jersey City","073":"Jersey City","076":"Englewood",
    "900":"Los Angeles","902":"Los Angeles","904":"Santa Monica","906":"Whittier","907":"Long Beach","908":"Long Beach","910":"Pasadena","913":"San Fernando","914":"Van Nuys",
    "606":"Chicago","607":"Chicago","608":"Oak Lawn",
    "770":"Houston","773":"Spring","774":"Katy","752":"Dallas","750":"Plano","761":"Fort Worth","762":"Denton",
    "782":"San Antonio","781":"New Braunfels","780":"Laredo","787":"Austin","786":"Round Rock","785":"McAllen",
    "331":"Miami","330":"Hialeah","333":"Fort Lauderdale",
    "941":"San Francisco","940":"San Mateo","945":"Oakland","947":"Berkeley","948":"Richmond","950":"San Jose","958":"Sacramento","956":"Roseville","957":"Davis",
    "200":"Washington","202":"Washington","203":"Washington","204":"Washington","205":"Washington","222":"Arlington","223":"Alexandria",
    "021":"Boston","022":"Boston","024":"Waltham",
    "850":"Phoenix","852":"Tempe","853":"Glendale",
    "191":"Philadelphia","190":"Upper Darby",
    "981":"Seattle","980":"Bellevue","982":"Everett",
    "802":"Denver","800":"Aurora","801":"Littleton",
    "303":"Atlanta","300":"Marietta","301":"Douglasville",
    "972":"Portland","970":"Beaverton","971":"Hillsboro",
    "482":"Detroit","480":"Warren","481":"Ann Arbor",
    "462":"Indianapolis","460":"Noblesville","461":"Plainfield",
    "372":"Nashville","370":"Franklin","371":"Smyrna",
    "731":"Oklahoma City","730":"Edmond",
    "554":"Minneapolis","553":"Minnetonka","551":"Saint Paul","550":"Forest Lake",
    "441":"Cleveland","440":"Mentor","442":"Akron",
    "277":"Durham","275":"Cary","276":"Raleigh","274":"Greensboro","272":"High Point","271":"Winston-Salem","270":"Statesville",
    "631":"Saint Louis","630":"Chesterfield","633":"Saint Charles",
    "641":"Kansas City","640":"Independence","662":"Overland Park","660":"Lawrence",
    "706":"Baton Rouge","708":"Baton Rouge","707":"Prairieville","705":"Lafayette","703":"Houma",
    "995":"Anchorage","996":"Wasilla","997":"Fairbanks",
}

def _load_zip_pool_df(path_or_df):
    if isinstance(path_or_df, pd.DataFrame):
        df = path_or_df.copy()
    else:
        df = pd.read_csv(path_or_df)
    zcol = next((c for c in ["zipcode","zip","postal_code","ZIP","Zipcode"] if c in df.columns), None)
    if not zcol:
        raise ValueError("ZIP pool must include a 'zipcode' (or 'zip'/'postal_code') column")
    df["zipcode"] = df[zcol].astype(str).str.zfill(5)
    pref3 = df["zipcode"].str[:3]
    scol = next((c for c in ["state","state_id","State","STATE"] if c in df.columns), None)
    if scol:
        df["state"] = df[scol].astype(str).str.upper().str[:2]
    else:
        df["state"] = pref3.map(_PREFIX_STATE).fillna("UNK")
    ccol = next((c for c in ["city","City","CITY"] if c in df.columns), None)
    if ccol:
        df["city"] = df[ccol].astype(str)
    else:
        df["city"] = pref3.map(_PREFIX_CITY).fillna("Unknown")
    return df[["zipcode","state","city"]].drop_duplicates()

# ---------------- Assignment helpers ----------------
def _assign_hospital_zipcodes(visits, zip_pool, seed=42):
    rng = np.random.default_rng(seed)
    hosp = derive(visits, "hospital","Hospital","hospital_name","Hospital_Name","facility","Facility")
    if not hosp: return {}
    hospitals = sorted(visits[hosp].dropna().astype(str).unique().tolist())
    if len(zip_pool) < len(hospitals):
        raise ValueError(f"ZIP pool too small: have {len(zip_pool)} ZIPs but {len(hospitals)} hospitals.")
    chosen = zip_pool[:len(hospitals)]
    rng.shuffle(chosen)
    return {h: z for h, z in zip(hospitals, chosen)}

def _assign_patient_zip_from_hospital(patients, visits, hosp_to_zip, zpool_df):
    """
    Set patients.zip to a ZIP near their primary hospital ZIP (same state; prefer same 3-digit prefix).
    Fill patients.city/state if those columns exist. No new columns are added.
    """
    zp = derive(patients, "zipcode","zip","Zipcode","postal_code")
    city_p = derive(patients, "city","City")
    state_p = derive(patients, "state","State","STATE")
    pid_p = derive(patients, "id","patient_id","Patient_ID")
    pid_v = derive(visits, "patient_id","Patient_ID","id")
    hosp  = derive(visits, "hospital","Hospital","hospital_name","Hospital_Name","facility","Facility")
    if not all([zp, pid_p, pid_v, hosp]): 
        return patients

    # primary hospital per patient = mode
    primary = (visits.groupby(pid_v)[hosp]
                    .agg(lambda s: s.mode().iat[0] if not s.mode().empty else s.dropna().iloc[0] if len(s.dropna()) else None))
    mdf = primary.reset_index().rename(columns={pid_v:"__pid__", hosp:"__hosp__"})
    mdf["__hzip__"] = mdf["__hosp__"].map(hosp_to_zip)
    mdf["__hstate__"] = mdf["__hzip__"].astype(str).str[:3].map(_PREFIX_STATE)

    zdf = zpool_df.copy()
    zdf["__zip5__"] = zdf["zipcode"].astype(str).str.zfill(5)
    zdf["__pref3__"] = zdf["__zip5__"].str[:3]

    def pick_near_zip(hzip):
        hzip = str(hzip).zfill(5)
        pref3 = hzip[:3]
        st = _PREFIX_STATE.get(pref3)
        if not st:
            return hzip
        pool_state = zdf[zdf["state"] == st]
        if pool_state.empty:
            return hzip
        same_pref = pool_state[pool_state["__pref3__"] == pref3]
        if not same_pref.empty:
            return same_pref.sample(1)["__zip5__"].iloc[0]
        return pool_state.sample(1)["__zip5__"].iloc[0]

    mdf["__pzip__"] = mdf["__hzip__"].apply(pick_near_zip)
    mdf = mdf.merge(zdf[["__zip5__","city","state"]].rename(columns={"__zip5__":"__pzip__"}), on="__pzip__", how="left")

    out = patients.merge(mdf[["__pid__","__pzip__","city","state"]], left_on=pid_p, right_on="__pid__", how="left")
    out[zp] = out["__pzip__"].fillna(out.get(zp))
    if city_p and "city" in out.columns:
        out[city_p] = out["city"].fillna(out.get(city_p))
    if state_p and "state" in out.columns:
        out[state_p] = out["state"].fillna(out.get(state_p))
    out.drop(columns=[c for c in ["__pid__","__pzip__","city","state"] if c in out.columns], inplace=True)
    return out

def _propagate_patient_zip_to_visits(patients, visits):
    zip_p = derive(patients, "zipcode","zip","Zipcode","postal_code")
    zip_v = derive(visits,   "zipcode","zip","Zipcode","postal_code")
    pid_v = derive(visits,   "patient_id","Patient_ID","id")
    pid_p = derive(patients, "id","patient_id","Patient_ID")
    if not all([zip_p, zip_v, pid_v, pid_p]): return visits
    v = visits.merge(patients[[pid_p, zip_p]].rename(columns={pid_p:"__pid__", zip_p:"__zip__"}),
                     left_on=pid_v, right_on="__pid__", how="left")
    v[zip_v] = v["__zip__"]
    v.drop(columns=[c for c in ["__pid__","__zip__"] if c in v.columns], inplace=True)
    return v


def _assign_patient_zip_and_hospital(patients, visits, hosp_to_zip, zpool_df, seed=42, leak_rate=0.15, min_cap=2, max_cap=4):
    """
    Hybrid realism:
      - Each patient is assigned a random ZIP from the pool (uniform).
      - Primary assignment to hospitals in the SAME 3-digit prefix (local catchment).
      - Limit per-prefix competition: choose from up to [min_cap, max_cap] hospitals in that prefix.
      - Leakage: with probability `leak_rate`, assign to a hospital in the SAME STATE but a different prefix.
      - Fallback: any hospital if state/prefix pools are empty.
    No new patient columns are added; city/state are only filled if they already exist.
    """
    import numpy as np
    rng = np.random.default_rng(seed)

    # Column resolution
    zp_pat = derive(patients, "zipcode","zip","Zipcode","postal_code")
    city_pat = derive(patients, "city","City")
    state_pat = derive(patients, "state","State","STATE")
    pid_pat = derive(patients, "id","patient_id","Patient_ID")
    pid_vis = derive(visits, "patient_id","Patient_ID","id")
    hosp_vis = derive(visits, "hospital","Hospital","hospital_name","Hospital_Name","facility","Facility")
    if not all([zp_pat, pid_pat, pid_vis, hosp_vis]):
        return patients, visits  # nothing to do

    # Hospital ZIP & prefix/state
    import pandas as pd
    hzip_series = pd.Series(hosp_to_zip, name="__hzip__")
    hdf = hzip_series.reset_index()
    hdf.columns = ["__hosp__", "__hzip__"]
    hdf["__hzip5__"] = hdf["__hzip__"].astype(str).str.zfill(5)
    hdf["__pref3__"] = hdf["__hzip5__"].str[:3]
    hdf["__state2__"] = hdf["__pref3__"].map(_PREFIX_STATE).fillna("UNK")

    # ZIP pool
    zdf = zpool_df.copy()
    zdf["__zip5__"] = zdf["zipcode"].astype(str).str.zfill(5)
    zdf["__pref3__"] = zdf["__zip5__"].str[:3]
    zdf["__state2__"] = zdf["state"].fillna(zdf["__pref3__"].map(_PREFIX_STATE)).fillna("UNK")

    # Build lookups
    from collections import defaultdict
    pref_to_hosps_all = defaultdict(list)
    state_to_hosps = defaultdict(list)
    for _, r in hdf.iterrows():
        pref_to_hosps_all[r["__pref3__"]].append(r["__hosp__"])
        state_to_hosps[r["__state2__"]].append(r["__hosp__"])

    # Cap hospitals per prefix (competition limit)
    capped_pref_to_hosps = {}
    for pref, hosps in pref_to_hosps_all.items():
        cap = rng.integers(min_cap, max_cap+1)  # inclusive upper bound
        if len(hosps) <= cap:
            capped_pref_to_hosps[pref] = hosps[:]
        else:
            # random subset for active competition in that prefix
            idx = rng.choice(len(hosps), size=cap, replace=False)
            capped_pref_to_hosps[pref] = [hosps[i] for i in idx]

    # Random ZIPs for patients (uniform over full pool)
    zip_choices = zdf["__zip5__"].sample(n=len(patients), replace=True, random_state=seed).to_numpy()
    p_assign = pd.DataFrame({ "__pid__": patients[pid_pat].values, "__pzip__": zip_choices })
    p_assign = p_assign.merge(zdf[["__zip5__","city","__state2__","__pref3__"]],
                              left_on="__pzip__", right_on="__zip5__", how="left")

    # Hospital chooser with leakage
    all_hospitals = list(hosp_to_zip.keys())
    def choose_hospital(pref3, state2):
        # PRIMARY: same prefix (capped competition set)
        candidates = capped_pref_to_hosps.get(pref3, [])
        if candidates:
            return rng.choice(candidates)
        # SECONDARY: same state (any prefix)
        state_candidates = state_to_hosps.get(state2, [])
        if state_candidates:
            return rng.choice(state_candidates)
        # FINAL fallback
        return rng.choice(all_hospitals) if all_hospitals else None

    p_assign["__hosp__"] = [choose_hospital(pref, st) for pref, st in zip(p_assign["__pref3__"], p_assign["__state2__"])]
    # Enforce patient state == hospital state by resampling ZIP when needed
    hdf_states = hdf.set_index("__hosp__")["__state2__"].to_dict()
    p_assign["__hstate__"] = p_assign["__hosp__"].map(hdf_states)
    mismatch = p_assign["__state2__"] != p_assign["__hstate__"]
    if mismatch.any():
        zips_by_state = zdf.groupby("__state2__")["__zip5__"].apply(list).to_dict()
        hosp_pref = hdf.set_index("__hosp__")["__pref3__"].to_dict()
        new_zips = []
        for pref, hst, hosp in zip(p_assign.loc[mismatch,"__pref3__"], p_assign.loc[mismatch,"__hstate__"], p_assign.loc[mismatch,"__hosp__"]):
            target_pref = hosp_pref.get(hosp)
            cand = zdf[(zdf["__state2__"]==hst) & (zdf["__pref3__"]==target_pref)]["__zip5__"].tolist()
            if not cand:
                cand = zips_by_state.get(hst, [])
            new_zips.append(rng.choice(cand) if cand else None)
        p_assign.loc[mismatch, "__pzip__"] = new_zips
        # refresh derived props after resample
        p_assign = p_assign.drop(columns=[c for c in ["__zip5__","__pref3__","__state2__"] if c in p_assign.columns]) 
        p_assign = p_assign.merge(zdf[["__zip5__","__pref3__","__state2__","city"]], left_on="__pzip__", right_on="__zip5__", how="left")

    # Write into patients (no new columns)
    out_pat = patients.merge(
        p_assign[[c for c in ["__pid__","__pzip__","city","__state2__"] if c in p_assign.columns]],
        left_on=pid_pat, right_on="__pid__", how="left"
    )
    out_pat[zp_pat] = out_pat["__pzip__"].fillna(out_pat.get(zp_pat))
    if city_pat and "city" in out_pat.columns and "city" in out_pat:
        out_pat[city_pat] = out_pat["city"].fillna(out_pat.get(city_pat))
    if state_pat and "__state2__" in out_pat.columns:
        out_pat[state_pat] = out_pat["__state2__"].fillna(out_pat.get(state_pat))
    out_pat.drop(columns=[c for c in ["__pid__","__pzip__","__zip5__","__pref3__","__state2__","city"] if c in out_pat.columns], inplace=True)

    # Enforce chosen hospital across all visits for the patient
    out_vis = visits.merge(p_assign[["__pid__","__hosp__"]], left_on=pid_vis, right_on="__pid__", how="left")
    out_vis[hosp_vis] = out_vis["__hosp__"].fillna(out_vis[hosp_vis])
    out_vis.drop(columns=[c for c in ["__pid__","__hosp__"] if c in out_vis.columns], inplace=True)

    return out_pat, out_vis


# ---------------- Validation ----------------

def validate_summary(patients, visits, billing, today_str=None):
    def col(df, *names):
        for n in names:
            if n in df.columns: return n
        return None
    import numpy as np
    today = pd.to_datetime(today_str) if today_str else pd.Timestamp.today()

    # Column name resolution
    pid_p = col(patients, "id","patient_id","Patient_ID")
    pid_v = col(visits, "patient_id","Patient_ID","id")
    vid_v = col(visits, "visit_id","medical_record_id","id")
    bid_b = col(billing, "billing_id","Billing_ID","id")
    vid_b = col(billing, "visit_id","medical_record_id","id")
    # demographics
    dob_p = col(patients, "date_of_birth","dob","Date_of_Birth")
    age_p = col(patients, "age","Age")
    dob_v = col(visits, "date_of_birth","dob","Date_of_Birth")
    age_v = col(visits, "age","Age")
    gender_v = col(visits, "gender","Gender","sex","Sex")
    blood_p = col(patients, "blood_type","Blood_Type","blood","Blood")
    blood_v = col(visits, "blood_type","Blood_Type","blood","Blood")
    # clinical
    cond_v = col(visits, "condition","Condition","diagnosis","Diagnosis")
    treat_v = col(visits, "treatment","Treatment","procedure","Procedure")
    severity_v = col(visits, "severity","Severity")
    # dates
    admit = col(visits, "date_of_admission","admission_date","admit_date")
    disch = col(visits, "date_of_discharge","discharge_date","disch_date")
    # insurance / billing
    # insurance / billing
    insurer_p = col(patients, "insurance_provider","Insurance_Provider","insurer")
    policy_p  = col(patients, "policy_number","Policy_Number","policy", "insurance_policy_number","Insurance_Policy_Number","insurancePolicyNumber")
    insurer_v = col(visits, "insurance_provider","Insurance_Provider","insurer")
    policy_v  = col(visits, "policy_number","Policy_Number","policy", "insurance_policy_number","Insurance_Policy_Number","insurancePolicyNumber")
    total_b = col(billing, "total_charge","Total_Charge")
    expected_b = col(billing, "expected_payment_date","Expected_Payment_Date")
    actual_b   = col(billing, "actual_payment_date","Actual_Payment_Date")
    status_b   = col(billing, "payment_status","Payment_Status","status")
    # hospital / geo
    hosp_v = col(visits, "hospital","Hospital","hospital_name","Hospital_Name","facility","Facility")
    hz = "hospital_zipcode" if "hospital_zipcode" in visits.columns else None
    hs = "hospital_state" if "hospital_state" in visits.columns else None
    zipcode_p = col(patients, "zipcode","zip","Zipcode","postal_code")
    city_p = col(patients, "city","City")
    state_p = col(patients, "state","State","STATE")

    summary = {}

    # ---------- Structural & Linkage ----------
    summary["patients_unique_ids"] = int(patients[pid_p].nunique() == len(patients)) if pid_p else -1
    summary["visits_unique_ids"]   = int(visits[vid_v].nunique() == len(visits)) if vid_v else -1
    summary["billing_unique_ids"]  = int(billing[bid_b].nunique() == len(billing)) if bid_b else -1

    summary["patients_rows"] = int(len(patients))
    summary["visits_rows"]   = int(len(visits))
    summary["billing_rows"]  = int(len(billing))

    if vid_b and vid_v:
        counts = billing.groupby(vid_b).size()
        summary["visits_missing_billing"] = int((~visits[vid_v].isin(counts.index)).sum())
        summary["multiple_billings_per_visit"] = int((counts > 1).sum())
    else:
        summary["visits_missing_billing"] = -1
        summary["multiple_billings_per_visit"] = -1

    # ---------- Demographics & Age Consistency ----------
    if dob_p and age_p:
        ap = patients.copy()
        ap["_dob"] = pd.to_datetime(ap[dob_p], errors="coerce")
        had_bday = ((today.month > ap["_dob"].dt.month) | ((today.month == ap["_dob"].dt.month) & (today.day >= ap["_dob"].dt.day)))
        ap["_age_calc"] = (today.year - ap["_dob"].dt.year - (~had_bday).astype(int)).clip(lower=0)
        summary["patient_age_mismatches"] = int((pd.to_numeric(ap[age_p], errors="coerce").fillna(-1).astype(int) != ap["_age_calc"].fillna(-1).astype(int)).sum())
    else:
        summary["patient_age_mismatches"] = -1

    if dob_v and age_v and admit:
        vv = visits.copy()
        vv["_dob"] = pd.to_datetime(vv[dob_v], errors="coerce")
        vv["_ad"]  = pd.to_datetime(vv[admit], errors="coerce")
        had_bday = ((vv["_ad"].dt.month > vv["_dob"].dt.month) | ((vv["_ad"].dt.month == vv["_dob"].dt.month) & (vv["_ad"].dt.day >= vv["_dob"].dt.day)))
        vv["_age_calc"] = (vv["_ad"].dt.year - vv["_dob"].dt.year - (~had_bday).astype(int)).clip(lower=0)
        summary["visit_age_mismatches"] = int((pd.to_numeric(vv[age_v], errors="coerce").fillna(-1).astype(int) != vv["_age_calc"].fillna(-1).astype(int)).sum())
    else:
        summary["visit_age_mismatches"] = -1

    if blood_v and pid_v:
        by_p = visits.groupby(pid_v)[blood_v].nunique(dropna=True)
        summary["blood_type_inconsistencies"] = int((by_p > 1).sum())
    elif blood_p and pid_p:
        by_p = patients.groupby(pid_p)[blood_p].nunique(dropna=True)
        summary["blood_type_inconsistencies"] = int((by_p > 1).sum())
    else:
        summary["blood_type_inconsistencies"] = -1

    # ---------- Insurance Integrity ----------
    # policy present but provider null (patients or visits; sum both if both exist)
    def _policy_without_provider(df, policy_col, prov_col):
        if not policy_col or not prov_col: return 0
        return int(((df[policy_col].astype(str).str.strip() != "") & (df[prov_col].isna() | (df[prov_col].astype(str).str.strip()==""))).sum())
    summary["policy_without_provider"] = (
        (_policy_without_provider(patients, policy_p, insurer_p) if policy_p and insurer_p else 0) +
        (_policy_without_provider(visits, policy_v, insurer_v) if policy_v and insurer_v else 0)
        if (policy_p or policy_v) else -1
    )

    # ---------- Clinical Gating & Special Rules ----------
    # childbirth rules require condition + gender + age
    def _is_childbirth(x):
        if not isinstance(x, str): return False
        return "childbirth" in x.lower() or "labor" in x.lower() or "delivery" in x.lower()
    if cond_v and gender_v:
        is_cb = visits[cond_v].apply(_is_childbirth)
        if gender_v:
            summary["childbirth_non_female"] = int((is_cb & (~visits[gender_v].astype(str).str.lower().isin(["female","f"])) ).sum())
        else:
            summary["childbirth_non_female"] = -1
        if age_v:
            summary["childbirth_age_out_of_range"] = int((is_cb & ~visits[age_v].between(16,55, inclusive="both")).sum())
        else:
            summary["childbirth_age_out_of_range"] = -1
    else:
        summary["childbirth_non_female"] = -1
        summary["childbirth_age_out_of_range"] = -1

    # ---------- Condition Breadth & Frequency Limits ----------
    if cond_v and pid_v:
        nconds = visits.groupby(pid_v)[cond_v].nunique(dropna=True)
        summary["patients_with_gt3_conditions"] = int((nconds > 3).sum())
    else:
        summary["patients_with_gt3_conditions"] = -1

    if cond_v and treat_v:
        is_hd = visits[cond_v].astype(str).str.lower().str.contains("heart")
        is_bypass = visits[treat_v].astype(str).str.lower().str.contains("bypass")
        by_pt = visits[is_hd & is_bypass].groupby(pid_v).size() if pid_v else pd.Series(dtype=int)
        summary["heart_bypass_gt1_violations"] = int((by_pt > 1).sum()) if not by_pt.empty else -1
    else:
        summary["heart_bypass_gt1_violations"] = -1

    if cond_v and pid_v:
        is_cb = visits[cond_v].apply(_is_childbirth)
        per_pt = is_cb.groupby(visits[pid_v]).sum()
        summary["childbirth_visits_per_patient_gt2"] = int((per_pt > 2).sum()) if not per_pt.empty else -1
    else:
        summary["childbirth_visits_per_patient_gt2"] = -1

    if cond_v and treat_v:
        is_cb = visits[cond_v].apply(_is_childbirth)
        allowed = {"postpartum checkup","monitoring","lactation support","postpartum monitoring"}
        bad = (is_cb & (~visits[treat_v].astype(str).str.lower().isin(allowed)))
        summary["childbirth_followup_treatment_violations"] = int(bad.sum())
    else:
        summary["childbirth_followup_treatment_violations"] = -1

    # ---------- LOS & Same-Day Discharges ----------
    if admit and disch:
        vv = visits[[hosp_v, severity_v, cond_v, admit, disch]].copy()
        vv["_ad"] = pd.to_datetime(vv[admit], errors="coerce")
        vv["_dc"] = pd.to_datetime(vv[disch], errors="coerce")
        vv["_los_days"] = (vv["_dc"] - vv["_ad"]).dt.days
        same_day = (vv["_los_days"] == 0)
        # Minor/Chronic + Normal/Mild if columns exist
        mask_minor = vv[cond_v].astype(str).str.lower().str.contains("minor|chronic") if cond_v else False
        mask_sev = vv[severity_v].astype(str).str.lower().isin(["normal","mild"]) if severity_v else True
        denom = (mask_sev) if isinstance(mask_sev, (pd.Series, np.ndarray)) else same_day.index == same_day.index
        rate = (same_day[denom].mean()*100) if denom is not False and denom is not True else (same_day.mean()*100)
        summary["minor_same_day_rate_actual_pct"] = round(float(rate), 2) if not np.isnan(rate) else -1.0
        by_h = same_day.groupby(vv[hosp_v]).mean()*100 if hosp_v else pd.Series(dtype=float)
        summary["same_day_rate_by_hospital_stddev_pct"] = float(by_h.std()) if not by_h.empty else -1.0
        summary["same_day_rate_top_hospital_pct"] = float(by_h.max()) if not by_h.empty else -1.0
        summary["same_day_rate_overall_pct"] = round(float(same_day.mean()*100), 2) if same_day.notna().any() else -1.0
    else:
        summary["minor_same_day_rate_actual_pct"] = -1.0
        summary["same_day_rate_by_hospital_stddev_pct"] = -1.0
        summary["same_day_rate_top_hospital_pct"] = -1.0
        summary["same_day_rate_overall_pct"] = -1.0

    # ---------- Billing Trend & Payment Logic ----------
    if total_b and admit and pid_v and cond_v and vid_v and vid_b:
        tmp = visits[[pid_v, cond_v, admit, vid_v]].copy()
        bsub = billing[[vid_b, total_b]].rename(columns={vid_b:"__vid__"})
        tmp = tmp.merge(bsub, left_on=vid_v, right_on="__vid__", how="left")
        tmp[admit] = pd.to_datetime(tmp[admit], errors="coerce")
        tmp[total_b] = pd.to_numeric(tmp[total_b], errors="coerce")
        counts_inc = 0
        counts_all = 0
        runs_nondec = 0
        exceeded_first = 0
        for (pt, cd), grp in tmp.groupby([pid_v, cond_v]):
            g = grp.sort_values(by=admit)
            charges = g[total_b].dropna().values
            if len(charges) >= 2:
                counts_all += (len(charges)-1)
                incs = (charges[1:] > charges[:-1]).sum()
                counts_inc += int(incs)
                exceeded_first += int((charges[1:] > charges[:1]).sum())
                if np.all(charges[1:] >= charges[:-1]):
                    runs_nondec += 1
        summary["billing_followup_exceeded_first"] = int(exceeded_first)
        pct_inc = (counts_inc / counts_all * 100.0) if counts_all else 0.0
        summary["billing_followup_increase_pct"] = round(float(pct_inc), 2)
        summary["billing_overall_upward_trend_runs"] = int(runs_nondec)
    else:
        summary["billing_followup_exceeded_first"] = -1
        summary["billing_followup_increase_pct"] = -1.0
        summary["billing_overall_upward_trend_runs"] = -1

    # ---------- Payment Sanity & Dates ----------
    if actual_b:
        ap = pd.to_datetime(billing[actual_b], errors="coerce")
        summary["payment_future_dates"] = int((ap > today).sum())
    else:
        summary["payment_future_dates"] = -1

    # Payment status rules & insured vs outcomes
    def _is_late_unpaid(row):
        exp = pd.to_datetime(row.get(expected_b), errors="coerce") if expected_b else pd.NaT
        act = pd.to_datetime(row.get(actual_b), errors="coerce") if actual_b else pd.NaT
        if pd.isna(exp) and pd.isna(act): 
            return False
        if pd.isna(act):  # unpaid
            return (not pd.isna(exp)) and (exp < today)
        return (not pd.isna(exp)) and (act > exp)  # paid late
    if expected_b and (actual_b or status_b):
        btmp = billing.copy()
        btmp["_late_unpaid"] = btmp.apply(_is_late_unpaid, axis=1)
        # Determine insured: prefer visits/patients provider presence
        if insurer_v and vid_b and vid_v:
            vmap = visits[[vid_v, insurer_v]].rename(columns={vid_v:"__vid", insurer_v:"__prov"})
            btmp = btmp.merge(vmap, left_on=vid_b, right_on="__vid", how="left")
            insured = ~(btmp["__prov"].isna() | (btmp["__prov"].astype(str).str.strip()==""))
        elif insurer_p and pid_v and vid_b and vid_v and pid_p:
            v2 = visits[[vid_v, pid_v]].rename(columns={vid_v:"__vid", pid_v:"__pid"})
            p2 = patients[[pid_p, insurer_p]].rename(columns={pid_p:"__pid", insurer_p:"__prov"})
            btmp = btmp.merge(v2, left_on=vid_b, right_on="__vid", how="left").merge(p2, on="__pid", how="left")
            insured = ~(btmp["__prov"].isna() | (btmp["__prov"].astype(str).str.strip()==""))
        else:
            insured = pd.Series(False, index=btmp.index)
        if insured.any():
            summary["late_unpaid_insured_pct"] = round(float(btmp.loc[insured, "_late_unpaid"].mean()*100), 2)
        else:
            summary["late_unpaid_insured_pct"] = -1.0
        if (~insured).any():
            summary["late_unpaid_uninsured_pct"] = round(float(btmp.loc[~insured, "_late_unpaid"].mean()*100), 2)
        else:
            summary["late_unpaid_uninsured_pct"] = -1.0
    else:
        summary["late_unpaid_insured_pct"] = -1.0
        summary["late_unpaid_uninsured_pct"] = -1.0

    # ---------- Existing geo/charge checks ----------
    if total_b:
        summary["charges_below_87"] = int((pd.to_numeric(billing[total_b], errors="coerce") < 87).sum())
        summary["zero_charges"] = int((pd.to_numeric(billing[total_b], errors="coerce") <= 0).sum())
    else:
        summary["charges_below_87"] = -1
        summary["zero_charges"] = -1

    # hospital one-zip & state match
    if hosp_v and hz:
        grp = visits.groupby(hosp_v)[hz].nunique(dropna=True)
        summary["hospitals_with_multiple_zipcodes"] = int((grp > 1).sum())
        summary["hospital_zipcodes_unique"] = int((grp > 1).sum() == 0)
    else:
        summary["hospitals_with_multiple_zipcodes"] = -1
        summary["hospital_zipcodes_unique"] = -1

    if hz and hs:
        inferred = visits[hz].astype(str).str[:3].map(_PREFIX_STATE)
        summary["hospital_state_mismatch"] = int(((visits[hs].fillna("UNK")) != (inferred.fillna("UNK"))).sum())
    else:
        summary["hospital_state_mismatch"] = -1

    # patient vs hospital state
    if pid_v and pid_p and zipcode_p and hs:
        vv = visits[[pid_v, hs]].copy()
        pp = patients[[pid_p, zipcode_p]].copy()
        merged = vv.merge(pp, left_on=pid_v, right_on=pid_p, how="left")
        p_state = merged[zipcode_p].astype(str).str[:3].map(_PREFIX_STATE)
        summary["patient_state_differs_from_hospital_state"] = int(((p_state.fillna("UNK")) != (merged[hs].fillna("UNK"))).sum())
    else:
        summary["patient_state_differs_from_hospital_state"] = -1

    # patient city presence (if column exists)
    if city_p:
        summary["patients_city_missing"] = int(patients[city_p].isna().sum() + (patients[city_p].astype(str).str.strip() == "").sum())
    else:
        summary["patients_city_missing"] = -1

    summary["version"] = "VALIDATION SUMMARY (v13.10 — full checks)"
    return summary

# ---------------- Main ----------------
def main(argv=None):
    parser = argparse.ArgumentParser(description="Healthcare Dataset Generator v13_10 (standalone)")
    parser.add_argument("--patients", type=int, default=1000)
    parser.add_argument("--seed", type=int, default=42)
    parser.add_argument("--today", type=str, default="2025-10-14")
    parser.add_argument("--outdir", type=str, default=".")
    parser.add_argument("--zip-target", type=int, default=120, help="Target count of distinct ZIP codes (max based on pool).")
    parser.add_argument("--zip-pool-file", type=str, default="", help="CSV/TXT file with columns: zipcode (required), state (preferred), city (preferred).")
    args, unknown = parser.parse_known_args(argv)

    # Run embedded base v13_2
    tmp_dir = tempfile.mkdtemp(prefix="v132_embed_")
    base_path = os.path.join(tmp_dir, "base_v13_2.py")
    with open(base_path, "wb") as f:
        f.write(base64.b64decode(BASE_B64.encode("ascii")))
    cmd = ["python", base_path, "--patients", str(args.patients), "--seed", str(args.seed), "--today", args.today, "--outdir", tmp_dir] + unknown
    proc = subprocess.run(cmd, capture_output=True, text=True)
    if proc.returncode != 0:
        raise RuntimeError(f"Embedded base failed: {proc.stderr[:600]}")

    patients_csv = pick_file_by_suffix(tmp_dir, "patients")
    visits_csv   = pick_file_by_suffix(tmp_dir, "visits")
    billing_csv  = pick_file_by_suffix(tmp_dir, "billing")
    patients = pd.read_csv(patients_csv)
    visits   = pd.read_csv(visits_csv)
    billing  = pd.read_csv(billing_csv)
    ## HOSPITAL CANONICALIZATION
    hosp_col = derive(visits, 'hospital','Hospital','hospital_name','Hospital_Name','facility','Facility')
    if hosp_col:
        visits[hosp_col] = (visits[hosp_col].astype(str).str.strip()
                             .str.replace(r'\s+',' ', regex=True).str.title())

    # Enforce one-hospital-per-patient (primary = mode)
    hosp_col = derive(visits, "hospital","Hospital","hospital_name","Hospital_Name","facility","Facility")
    pid_v = derive(visits, "patient_id","Patient_ID","id")
    if hosp_col and pid_v:
        primary = (visits.groupby(pid_v)[hosp_col]
                        .agg(lambda s: s.mode().iat[0] if not s.mode().empty else s.dropna().iloc[0] if len(s.dropna()) else None))
        primary = primary.reset_index().rename(columns={pid_v:"__pid__", hosp_col:"__h__"})
        visits = visits.merge(primary, left_on=pid_v, right_on="__pid__", how="left")
        visits[hosp_col] = visits["__h__"]
        visits.drop(columns=[c for c in ["__pid__","__h__"] if c in visits.columns], inplace=True)

    # Post-gen fixes
    visits = fix_ages(visits, patients)
    billing = rescale_charges_for_escalation(visits, billing)

    # Build ZIP pool dataframe and trim to target
    if args.zip_pool_file and os.path.exists(args.zip_pool_file):
        _zdf = _load_zip_pool_df(args.zip_pool_file)
    else:
        _zdf = _load_zip_pool_df(pd.DataFrame({"zipcode": list(_PREFIX_STATE.keys())}))
    _zip_to_state = dict(zip(_zdf["zipcode"], _zdf["state"]))
    zip_pool_full = _zdf["zipcode"].tolist()  # use full pool for hospitals to guarantee uniqueness
    zip_pool = _zdf["zipcode"].tolist()[:max(args.zip_target, _zdf.shape[0])]

    # Assign UNIQUE ZIP per hospital (stratified across states, unique per hospital)
    if args.zip_pool_file and os.path.exists(args.zip_pool_file):
        _zdf = _load_zip_pool_df(args.zip_pool_file)
    else:
        _zdf = _load_zip_pool_df(pd.DataFrame({'zipcode': list(_PREFIX_STATE.keys())}))
    _zdf['zipcode'] = _zdf['zipcode'].astype(str).str.zfill(5)
    _zdf['state'] = _zdf['state'].astype(str).str.upper().str[:2]

    hosp_col = derive(visits, 'hospital','Hospital','hospital_name','Hospital_Name','facility','Facility')
    hospitals = sorted(visits[hosp_col].dropna().astype(str).unique().tolist()) if hosp_col else []

    rng = np.random.default_rng(args.seed)
    # proportional allocation by state
    vc = _zdf['state'].value_counts()
    tot = int(vc.sum()) if len(vc) else 1
    alloc = {st: int(round(len(hospitals) * (cnt/tot))) for st, cnt in vc.items()}
    delta = len(hospitals) - sum(alloc.values())
    states = list(vc.index)
    i=0
    while delta != 0 and states:
        st = states[i % len(states)]
        if delta > 0:
            alloc[st] += 1; delta -= 1
        else:
            if alloc[st] > 0:
                alloc[st] -= 1; delta += 1
        i += 1

    chosen = []
    for st, n in alloc.items():
        if n <= 0: continue
        pool = _zdf.loc[_zdf['state']==st, 'zipcode'].unique()
        if len(pool) >= n:
            chosen.extend(rng.choice(pool, size=n, replace=False).tolist())
        else:
            chosen.extend(pool.tolist())
    short = len(hospitals) - len(chosen)
    if short > 0:
        remaining = np.setdiff1d(_zdf['zipcode'].unique(), chosen)
        chosen.extend(rng.choice(remaining, size=short, replace=False).tolist())
    rng.shuffle(chosen)
    hosp_to_zip = {h:z for h,z in zip(hospitals, chosen)}
    _zip_to_state = dict(zip(_zdf['zipcode'], _zdf['state']))

    if hosp_col:
        visits["hospital_zipcode"] = visits[hosp_col].map(hosp_to_zip)
        visits["hospital_state"] = visits["hospital_zipcode"].map(_zip_to_state).fillna(
            visits["hospital_zipcode"].astype(str).str[:3].map(_PREFIX_STATE)
        ).fillna("UNK")

    # patients: enforce same-state & near-prefix ZIP, fill city/state if columns exist
    patients, visits = _assign_patient_zip_and_hospital(patients, visits, hosp_to_zip, _zdf, seed=args.seed)
    # Rebuild hospital->ZIP mapping *from patient ZIPs* to avoid state skew.
    if hosp_col:
        # Build patient ZIP prefix/state maps
        zipcol_pat = derive(patients, "zipcode","zip","Zipcode","postal_code")
        vp = derive(visits, "patient_id","Patient_ID","id")
        pp = derive(patients, "id","patient_id","Patient_ID")
        if zipcol_pat and vp and pp:
            vpp = visits[[vp, hosp_col]].copy()
            pz  = patients[[pp, zipcol_pat]].copy()
            m   = vpp.merge(pz, left_on=vp, right_on=pp, how="left")
            m["__zip5__"] = m[zipcol_pat].astype(str).str.zfill(5)
            m["__pref3__"] = m["__zip5__"].str[:3]
            # Infer state from pool or prefix
            _zdf2 = _zdf.copy()
            _zdf2["zipcode"] = _zdf2["zipcode"].astype(str).str.zfill(5)
            _zdf2["state"] = _zdf2["state"].astype(str).str.upper().str[:2]
            _zip_to_state = dict(zip(_zdf2["zipcode"], _zdf2["state"]))
            m["__state2__"] = m["__zip5__"].map(_zip_to_state).fillna(m["__pref3__"].map(_PREFIX_STATE)).fillna("UNK")

            # For each hospital, select a representative ZIP:
            # 1) Use the modal 3-digit prefix among its patients;
            # 2) Choose a ZIP from the pool in that prefix (same state);
            # 3) Ensure uniqueness across hospitals; if collision, pick another ZIP in same prefix/state; else same state; else anywhere.
            rng = np.random.default_rng(args.seed)
            hosp_list = sorted(visits[hosp_col].dropna().astype(str).unique().tolist())
            hosp_to_zip_new = {}
            used = set()
            for h in hosp_list:
                hh = m[m[hosp_col] == h]
                if hh.empty:
                    continue
                pref_counts = hh["__pref3__"].value_counts()
                pick_zip = None
                for pref in pref_counts.index.tolist():
                    st = _PREFIX_STATE.get(pref, None)
                    # Candidate zips in pool: same pref (and state if available)
                    cand = _zdf2.loc[_zdf2["zipcode"].str[:3]==pref, "zipcode"].tolist()
                    rng.shuffle(cand)
                    # pick a not-yet-used
                    for z in cand:
                        if z not in used:
                            pick_zip = z
                            break
                    if pick_zip: break
                # Fallbacks
                if pick_zip is None:
                    # try same state as patient's majority state
                    st_counts = hh["__state2__"].value_counts()
                    for st in st_counts.index.tolist():
                        cand = _zdf2.loc[_zdf2["state"]==st, "zipcode"].tolist()
                        rng.shuffle(cand)
                        for z in cand:
                            if z not in used:
                                pick_zip = z; break
                        if pick_zip: break
                if pick_zip is None:
                    # anywhere
                    cand = _zdf2["zipcode"].tolist()
                    rng.shuffle(cand)
                    for z in cand:
                        if z not in used:
                            pick_zip = z; break
                hosp_to_zip_new[h] = pick_zip
                used.add(pick_zip)

            hosp_to_zip = hosp_to_zip_new
            _zip_to_state = dict(zip(_zdf2["zipcode"], _zdf2["state"]))
            # Overwrite visits with the rebuilt mapping
            visits["hospital_zipcode"] = visits[hosp_col].map(hosp_to_zip)
            visits["hospital_state"] = visits["hospital_zipcode"].map(_zip_to_state).fillna(
                visits["hospital_zipcode"].astype(str).str[:3].map(_PREFIX_STATE)
            ).fillna("UNK")


    # propagate patient ZIP to visits if visits has zipcode column
    visits = _propagate_patient_zip_to_visits(patients, visits)

    # recompute patient age from DOB using --today
    patients = recompute_patient_age(patients, today_str=args.today)

    # Save outputs
    os.makedirs(args.outdir, exist_ok=True)
    # Cleanup merge artifacts per user spec
    if 'city_x' in patients.columns:
        patients.drop(columns=['city_x'], inplace=True)
    if 'city_y' in patients.columns:
        if 'city' in patients.columns:
            patients['city'] = patients['city'].fillna(patients['city_y'])
            patients.drop(columns=['city_y'], inplace=True)
        else:
            patients.rename(columns={'city_y': 'city'}, inplace=True)

    # --- FINAL REORDER/DROP BEFORE EXPORT ---
    # Patients: place 'city' immediately after 'address' (if both exist)
    if {'address', 'city'}.issubset(patients.columns):
        _pcols = list(patients.columns)
        _city = _pcols.pop(_pcols.index('city'))
        _pcols.insert(_pcols.index('address') + 1, _city)
        patients = patients[_pcols]

    # Visits: drop 'blood_type' and reorder columns
    if 'blood_type' in visits.columns:
        visits.drop(columns=['blood_type'], inplace=True)
    # place 'hospital_state' immediately after 'hospital'
    if {'hospital', 'hospital_state'}.issubset(visits.columns):
        _vcols = list(visits.columns)
        _hstate = _vcols.pop(_vcols.index('hospital_state'))
        _vcols.insert(_vcols.index('hospital') + 1, _hstate)
        visits = visits[_vcols]
    # place 'hospital_zipcode' immediately after 'hospital_state'
    if {'hospital_state', 'hospital_zipcode'}.issubset(visits.columns):
        _vcols = list(visits.columns)
        _hzip = _vcols.pop(_vcols.index('hospital_zipcode'))
        _vcols.insert(_vcols.index('hospital_state') + 1, _hzip)
        visits = visits[_vcols]

    
    # Export once
    patients.to_csv(os.path.join(args.outdir, "patients.csv"), index=False)
    visits.to_csv(os.path.join(args.outdir, "visits.csv"), index=False)
    billing.to_csv(os.path.join(args.outdir, "billing.csv"), index=False)

    
    # --- FINAL STEP (auto): Remove 'name' column from billing export ---
    try:
        import pandas as _pd_final_billname
        _b_path = os.path.join(args.outdir, f"{export_prefix}_billing.csv") if 'export_prefix' in locals() else os.path.join(args.outdir, "billing.csv")
        _bdf = _pd_final_billname.read_csv(_b_path)
        if 'name' in _bdf.columns:
            _bdf.drop(columns=['name']).to_csv(_b_path, index=False)
    except Exception as _e_final_billname:
        # Do not interrupt generation if this final cleanup fails
        pass
    # ------------------------------------------------------------------
# --- FINAL STEP (auto-inserted): Remove date_of_birth from visits export ---
    try:
        import pandas as _pd_final_dobfix
        v_path = os.path.join(args.outdir, "visits.csv")
        _df_final = _pd_final_dobfix.read_csv(v_path)
        if 'date_of_birth' in _df_final.columns:
            _df_final.drop(columns=['date_of_birth']).to_csv(v_path, index=False)
    except Exception as _e_final_dobfix:
        # Fail silently to avoid disrupting generation if environment lacks pandas at this point
        pass
    # --------------------------------------------------------------------------

# Validation
    summary = validate_summary(patients, visits, billing, today_str=args.today)
    with open(os.path.join(args.outdir, "validation_summary.json"), "w") as f:
        json.dump(summary, f, indent=2)
    print(json.dumps(summary, indent=2))

if __name__ == "__main__":
    main()
